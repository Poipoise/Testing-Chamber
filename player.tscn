[gd_scene load_steps=4 format=3 uid="uid://d3l3lcd48ic5f"]

[sub_resource type="GDScript" id="GDScript_4vqol"]
resource_name = "player"
script/source = "extends CharacterBody3D

signal interacted_with

#playernodes
@onready var neck = $Neck
@onready var head = $Neck/Head
@onready var eyes = $Neck/Head/eyes

@onready var standing_collision_shape = $standing_collision_shape
@onready var crouching_collision_shape = $crouching_collision_shape
@onready var ray_cast_3d = $RayCast3D
@onready var camera_3d = $Neck/Head/eyes/Camera3D

#Speed vars
@export var walking_speed = 5.0
@export var sprinting_speed = 8.0
@export var crouching_speed = 3.0
var current_speed = 5.0

var walking = false
var sprinting = false 
var crouching = false
var sliding = false
var free_looking = false
#movement vars
var jump_velocity = 4.5
var lerp_speed = 10.0
var free_look_tilt_amount = -8

var slide_timer = 0.0
var slide_timer_max = 1.0
var slide_vector = Vector2.ZERO
var slide_speed = 10

const head_bobbing_sprinting_speed = 20.0
const head_bobbing_walking_speed = 14.0
const head_bobbing_crouching_speed = 10.0

const head_bobbing_crouching_intensity = 0.05
const head_bobbing_sprinting_intensity = 0.2
const head_bobbing_walking_intensity = 0.01

var head_bobbing_vector = Vector2.ZERO
var head_bobbing_index = 0.0
var head_bobbing_current_intensity = 0.0

#Input vars
@export var mouse_sensitivity = .003
var direction = Vector3.ZERO
var crouching_depth = -.5

var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")

func _ready():
	Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
	
func _input(event):
	if event.is_action_pressed(\"ui_cancel\"):
		Input.mouse_mode = Input.MOUSE_MODE_VISIBLE
	if event is InputEventMouseButton and Input.mouse_mode == Input.MOUSE_MODE_VISIBLE:
		if event.button_index == MOUSE_BUTTON_LEFT and event.pressed:
			Input.mouse_mode = Input.MOUSE_MODE_CAPTURED
func _physics_process(delta):
	var input_dir = Input.get_vector(\"left\", \"right\", \"forward\", \"backward\")
	
	if Input.is_action_pressed(\"crouch\") || sliding:
		current_speed = crouching_speed
		head.position.y = lerp(head.position.y,crouching_depth, delta * lerp_speed)
		standing_collision_shape.disabled = true
		crouching_collision_shape.disabled = false
		
		if sprinting && input_dir != Vector2.ZERO:
			sliding = true
			slide_timer = slide_timer_max
			slide_vector = input_dir
			free_looking = true
			print(\"sliding\")
			
		walking = false
		sprinting = false 
		crouching = true
	elif !ray_cast_3d.is_colliding():
		standing_collision_shape.disabled = false
		crouching_collision_shape.disabled = true
		head.position.y = lerp(head.position.y,0.0, delta * lerp_speed)
		
		if Input.is_action_pressed(\"sprint\"):
			current_speed = sprinting_speed
			walking = false
			sprinting = true 
			crouching = false
		else:
			current_speed = walking_speed
			walking = true
			sprinting = false 
			crouching = false
	if Input.is_action_just_pressed(\"interact\") && $Neck/Head/eyes/Camera3D/RayCast3D.is_colliding():
		if $Neck/Head/eyes/Camera3D/RayCast3D.get_collider().is_in_group(\"interactable\"):
			print(\"interacted\")
			$Neck/Head/eyes/Camera3D/RayCast3D.get_collider().interacted()
	if Input.is_action_pressed(\"free_look\") || sliding:
		free_looking = true
		
		if sliding:
			camera_3d.rotation.z = lerp(camera_3d.rotation.z,deg_to_rad(-7.0), delta * lerp_speed)
		else:
			camera_3d.rotation.z = deg_to_rad(neck.rotation.y * free_look_tilt_amount)
	else:
		free_looking = false
		neck.rotation.y = lerp(neck.rotation.y, 0.0, delta*lerp_speed)
		camera_3d.rotation.z = lerp(camera_3d.rotation.z, 0.0, delta*lerp_speed)

	if sliding:
		slide_timer -= delta
		if slide_timer <= 0:
			sliding = false
			free_looking = false
			print(\"done\")

	if sprinting:
		head_bobbing_current_intensity = head_bobbing_sprinting_intensity
		head_bobbing_index += head_bobbing_sprinting_speed*delta
	elif walking:
		head_bobbing_current_intensity = head_bobbing_walking_intensity
		head_bobbing_index += head_bobbing_walking_speed*delta
	elif crouching: 
		head_bobbing_current_intensity = head_bobbing_crouching_intensity
	head_bobbing_index += head_bobbing_crouching_speed*delta
	
	if is_on_floor() && !sliding && input_dir != Vector2.ZERO:
		head_bobbing_vector.y = sin(head_bobbing_index)
		head_bobbing_vector.x = sin(head_bobbing_index/2)+0.5
		eyes.position.y = lerp(eyes.position.y,head_bobbing_vector.y*(head_bobbing_current_intensity/2.0), delta*lerp_speed)
		eyes.position.x = lerp(eyes.position.x,head_bobbing_vector.x*(head_bobbing_current_intensity), delta*lerp_speed)
	else:
		eyes.position.y = lerp(eyes.position.y,0.0,delta*lerp_speed)
		eyes.position.x = lerp(eyes.position.x,0.0,delta*lerp_speed)
	if not is_on_floor():
		velocity.y -= gravity * delta
	if Input.is_action_just_pressed(\"jump\") and is_on_floor():
		velocity.y = jump_velocity
		sliding = false

	# Get the input direction and handle the movement/deceleration.
	
	direction = lerp(direction,(transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized(), delta*lerp_speed)
	
	if sliding:
		direction = (transform.basis * Vector3(slide_vector.x, 0.0, slide_vector.y)).normalized()
	if direction:
		velocity.x = direction.x * current_speed
		velocity.z = direction.z * current_speed
		
		if sliding:
			velocity.x = direction.x * (slide_timer + 0.1) * slide_speed
			velocity.z = direction.z * (slide_timer + 0.1) * slide_speed
	else:
		velocity.x = move_toward(velocity.x, 0, current_speed)
		velocity.z = move_toward(velocity.z, 0, current_speed)
	move_and_slide()

func _unhandled_input(event):
	if event is InputEventMouseMotion:
		if free_looking:
			neck.rotation.y -= event.relative.x * mouse_sensitivity
			neck.rotation.y = clamp(neck.rotation.y, deg_to_rad(-120),deg_to_rad(120))
		else:
			rotation.y -= event.relative.x * mouse_sensitivity
			head.rotation.x -= event.relative.y * mouse_sensitivity
			head.rotation_degrees.x = clamp(head.rotation_degrees.x, -89,89)

"

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_stmkw"]

[sub_resource type="CapsuleShape3D" id="CapsuleShape3D_m5bfw"]
height = 1.2

[node name="Player" type="CharacterBody3D"]
collision_layer = 2
script = SubResource("GDScript_4vqol")

[node name="standing_collision_shape" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("CapsuleShape3D_stmkw")

[node name="crouching_collision_shape" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.725892, 0)
shape = SubResource("CapsuleShape3D_m5bfw")
disabled = true

[node name="RayCast3D" type="RayCast3D" parent="."]
target_position = Vector3(0, 2, 0)

[node name="Neck" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.8, 0)

[node name="Head" type="Node3D" parent="Neck"]

[node name="eyes" type="Node3D" parent="Neck/Head"]

[node name="Camera3D" type="Camera3D" parent="Neck/Head/eyes"]

[node name="RayCast3D" type="RayCast3D" parent="Neck/Head/eyes/Camera3D"]
transform = Transform3D(2, 0, 0, 0, -8.74228e-08, -2, 0, 2, -8.74228e-08, 0, 0, -0.123161)
